boolean_survived_women_children <- women_and_children_df$Survived == "Yes"
# Create a variable "women_children_alive" that indicate the rows that women and children who are survived
women_children_alive <- sum(women_and_children_df[boolean_survived_women_children,]$Freq)
# Calculate female and children's survival rate and assign to the new variable "female_children_survive_rate"
female_children_survive_rate <- women_children_alive / total_number_women_and_children
male_survived_rate <- round(male_survived_rate * 100)
female_children_survive_rate <- round(female_children_survive_rate * 100)
return_string <- paste("Of", ticket_class, "class,", male_survived_rate, "% of men survived and", female_children_survive_rate, "% of women and children survived.")
return(return_string)
}
calc_survival_rate("3rd")
calc_survival_rate <- function(ticket_class) {
# Filter out ticket class from titanic_df and assign it a new variable "sub_frame"
sub_frame <- titanic_df[titanic_df$Class == ticket_class,]
# Filter out Adult male from the sub data frame and assign it to a new variable "Adult_male"
Adult_male <- sub_frame$Sex == "Male" & sub_frame$Age == "Adult"
# Filter out all the rows with sex is male and assign to the variable "male_row"
male_row <- sub_frame[Adult_male,]
# Sum up total male in the sub data frame use sum function and assign to the variable "total_number_men"
total_men <- sum(male_row$Freq)
# Filter out all the rows who is survived and assign to the variable "boolean_survived"
boolean_survived <- male_row$Survived == "Yes"
# Sum up total survived numbers and assign to the variable "total_survived"
total_survived_men <- sum(male_row[boolean_survived,]$Freq)
# Divide total_survived from total_number_men to get the male_survived_rate
male_survived_rate <- total_survived_men / total_men
# Filter out adult women from sub data set and assign to the variable called "Adult_women"
Adult_women <- sub_frame$Sex == "Female" & sub_frame$Age == "Adult"
# Filter out children from sub data set and assign to the variable "children"
children <- sub_frame$Age == "Child"
# Use or to combine Adult_women and children and assign to the variable "Adult_women_or_children"
Adult_women_or_children <- Adult_women | children
# Put the Adult_women_or_children" back to sub_frame create a new data frame that only contains information about women and children and assign to the variable "women_and_children_df"
women_and_children_df <- sub_frame[Adult_women_or_children,]
# Sum up women and children's number in this data set and assign them a new variable "total_number_women_and_children"
total_number_women_and_children <- sum(women_and_children_df$Freq)
# Filter out women and children who is survived and assign to the new variable "boolean_survived_women_children"
boolean_survived_women_children <- women_and_children_df$Survived == "Yes"
# Create a variable "women_children_alive" that indicate the rows that women and children who are survived
women_children_alive <- sum(women_and_children_df[boolean_survived_women_children,]$Freq)
# Calculate female and children's survival rate and assign to the new variable "female_children_survive_rate"
female_children_survive_rate <- women_children_alive / total_number_women_and_children
male_survived_rate <- round(male_survived_rate * 100)
female_children_survive_rate <- round(female_children_survive_rate * 100)
return_string <- paste("Of", ticket_class, "class,", male_survived_rate, "% of men survived and", female_children_survive_rate, "% of women and children survived.", sep = '')
return(return_string)
}
calc_survival_rate("3rd")
calc_survival_rate <- function(ticket_class) {
# Filter out ticket class from titanic_df and assign it a new variable "sub_frame"
sub_frame <- titanic_df[titanic_df$Class == ticket_class,]
# Filter out Adult male from the sub data frame and assign it to a new variable "Adult_male"
Adult_male <- sub_frame$Sex == "Male" & sub_frame$Age == "Adult"
# Filter out all the rows with sex is male and assign to the variable "male_row"
male_row <- sub_frame[Adult_male,]
# Sum up total male in the sub data frame use sum function and assign to the variable "total_number_men"
total_men <- sum(male_row$Freq)
# Filter out all the rows who is survived and assign to the variable "boolean_survived"
boolean_survived <- male_row$Survived == "Yes"
# Sum up total survived numbers and assign to the variable "total_survived"
total_survived_men <- sum(male_row[boolean_survived,]$Freq)
# Divide total_survived from total_number_men to get the male_survived_rate
male_survived_rate <- total_survived_men / total_men
# Filter out adult women from sub data set and assign to the variable called "Adult_women"
Adult_women <- sub_frame$Sex == "Female" & sub_frame$Age == "Adult"
# Filter out children from sub data set and assign to the variable "children"
children <- sub_frame$Age == "Child"
# Use or to combine Adult_women and children and assign to the variable "Adult_women_or_children"
Adult_women_or_children <- Adult_women | children
# Put the Adult_women_or_children" back to sub_frame create a new data frame that only contains information about women and children and assign to the variable "women_and_children_df"
women_and_children_df <- sub_frame[Adult_women_or_children,]
# Sum up women and children's number in this data set and assign them a new variable "total_number_women_and_children"
total_number_women_and_children <- sum(women_and_children_df$Freq)
# Filter out women and children who is survived and assign to the new variable "boolean_survived_women_children"
boolean_survived_women_children <- women_and_children_df$Survived == "Yes"
# Create a variable "women_children_alive" that indicate the rows that women and children who are survived
women_children_alive <- sum(women_and_children_df[boolean_survived_women_children,]$Freq)
# Calculate female and children's survival rate and assign to the new variable "female_children_survive_rate"
female_children_survive_rate <- women_children_alive / total_number_women_and_children
male_survived_rate <- round(male_survived_rate * 100)
female_children_survive_rate <- round(female_children_survive_rate * 100)
return_string <- paste("Of ", ticket_class, " class ,", male_survived_rate, "% of men survived and ", female_children_survive_rate, "% of women and children survived.", sep = '')
return(return_string)
}
calc_survival_rate("3rd")
# Define a function called "calc_survival_rate" and take "ticket_class" as argument
calc_survival_rate <- function(ticket_class) {
# Filter out ticket class from titanic_df and assign it a new variable "sub_frame"
sub_frame <- titanic_df[titanic_df$Class == ticket_class,]
# Filter out Adult male from the sub data frame and assign it to a new variable "Adult_male"
Adult_male <- sub_frame$Sex == "Male" & sub_frame$Age == "Adult"
# Filter out all the rows with sex is male and assign to the variable "male_row"
male_row <- sub_frame[Adult_male,]
# Sum up total male in the sub data frame use sum function and assign to the variable "total_number_men"
total_men <- sum(male_row$Freq)
# Filter out all the rows who is survived and assign to the variable "boolean_survived"
boolean_survived <- male_row$Survived == "Yes"
# Sum up total survived numbers and assign to the variable "total_survived"
total_survived_men <- sum(male_row[boolean_survived,]$Freq)
# Divide total_survived from total_number_men to get the male_survived_rate
male_survived_rate <- total_survived_men / total_men
# Filter out adult women from sub data set and assign to the variable called "Adult_women"
Adult_women <- sub_frame$Sex == "Female" & sub_frame$Age == "Adult"
# Filter out children from sub data set and assign to the variable "children"
children <- sub_frame$Age == "Child"
# Use or to combine Adult_women and children and assign to the variable "Adult_women_or_children"
Adult_women_or_children <- Adult_women | children
# Put the Adult_women_or_children" back to sub_frame create a new data frame that only contains information about women and children and assign to the variable "women_and_children_df"
women_and_children_df <- sub_frame[Adult_women_or_children,]
# Sum up women and children's number in this data set and assign them a new variable "total_number_women_and_children"
total_number_women_and_children <- sum(women_and_children_df$Freq)
# Filter out women and children who is survived and assign to the new variable "boolean_survived_women_children"
boolean_survived_women_children <- women_and_children_df$Survived == "Yes"
# Create a variable "women_children_alive" that indicate the rows that women and children who are survived
women_children_alive <- sum(women_and_children_df[boolean_survived_women_children,]$Freq)
# Calculate female and children's survival rate and assign to the new variable "female_children_survive_rate"
female_children_survive_rate <- women_children_alive / total_number_women_and_children
male_survived_rate <- round(male_survived_rate * 100)
female_children_survive_rate <- round(female_children_survive_rate * 100)
return_string <- paste("Of ", ticket_class, " class ,", male_survived_rate, " % of men survived and ", female_children_survive_rate, " % of women and children survived.", sep = '')
return(return_string)
}
calc_survival_rate("3rd")
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
print(calc_survival_rate("Crew"))
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
View(life_exp_df)
get_col_mean <- function(x) {
mean_result <- mean(x,na.rm = TRUE )
return(mean_result)
}
print(get_col_mean(x1918))
get_col_mean <- function(x) {
mean_result <- mean(x,na.rm = TRUE )
return(mean_result)
}
print(x1918)
get_col_mean <- function(x) {
mean_result <- mean(x,na.rm = TRUE )
return(mean_result)
}
print(get_col_mean(X1918))
get_col_mean <- function(x) {
mean_result <- mean(x,na.rm = TRUE )
return(mean_result)
}
print(X1918)
get_col_mean <- function(x) {
mean_result <- mean((life_exp_df[,column_name]), na.rm = TRUE)
return(mean_result)
}
print(X1918)
get_col_mean <- function(x) {
mean_result <- mean([life_exp_df$country,x], na.rm = TRUE)
return(mean_result)
}
print(X1918)
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[life_exp_df$country,x], na.rm = TRUE)
return(mean_result)
}
print(get_col_mean(X1918))
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[life_exp_df$country,x], na.rm = TRUE)
return(mean_result)
}
print(X1918)
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
print(X1918)
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
get_col_mean(X1921)
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
get_col_mean("X1921")
get_col_mean("X2018")
world_averages <- lapply(life_exp_df[,-1], get_col_mean )
world_averages <- lapply(life_exp_df[,-1], get_col_mean() )
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Assign a function with single variable x to the variable "get_col_mean"
# Rreturn the average number of the specific column
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
# Call the function "get_col_mean" and pass in the argument as X2018
get_col_mean("X2018")
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
world_averages <- lapply(life_exp_df[,-1], get_col_mean(x))
world_averages <- lapply(life_exp_df[,-1], get_col_mean())
is.vector(get_col_mean())
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
world_averages <- lapply(life_exp_df, get_col_mean)
world_averages <- lapply(life_exp_df, get_col_mean)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Assign a function with single variable x to the variable "get_col_mean"
# Rreturn the average number of the specific column
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
# Call the function "get_col_mean" and pass in the argument as X2018
get_col_mean("X2018")
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
world_averages <- lapply(life_exp_df[,-1], "get_col_mean")
is.function(get_col_mean())
is.function
is.function(get_col_mean(x))
is.function(get_col_mean(mean_result))
is.vector((get_col_mean()))
calculate_rect_area <- function(width, height){
return(width * height) # return a specific result
}
is.function(calculate_rect_area())
is.function(calculate_rect_area(4,2))
read.csv(data/gates_money.csv, stringAsFactor = FALSE)
read.csv(data/gates_money.csv, stringsAsFactor = FALSE)
read.csv("data/gates_money.csv", stringsAsFactor = FALSE)
getwd()
setwd("~/Desktop/book-exercises/chapter-10-exercises/exercise-4")
read.csv("data/gates_money.csv", stringsAsFactor = FALSE)
organization <- grants$organizaiton
grants <- read.csv("data/gates_money.csv", stringsAsFactor = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organizaiton
is.vector(organization)
organization <- grants[organizaiton]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
organization <- grants[organizaiton]
organization <- grants[organization]
is.vector(organization)
organization <- grants[grants[organization]]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
## Now you can ask some i
grants <- read.csv("data/gates_money.csv", stringsAsFactor = FALSE)
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants$organization
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Assign a function with single variable x to the variable "get_col_mean"
# Rreturn the average number of the specific column
get_col_mean <- function(x) {
mean_result <- mean(life_exp_df[,x], na.rm = TRUE)
return(mean_result)
}
# Call the function "get_col_mean" and pass in the argument as X2018
get_col_mean("X2018")
is.function(get_col_mean())
age number of the specific column
get_col_mean <- function(x) {
mean_result <- mean(x, na.rm = TRUE)
return(mean_result)
}
# Call the function "get_col_mean" and pass in the argument as X2018
get_col_mean(life_exp_df[,"X2018"])
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
world_averages
life_exp_df[,2]
is.function
is.function(get_col_mean)
world_averages(X2018)
world_averages$X2018
world_averages$X2018 - world_averages$X1918
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
View(life_exp_df)
View(life_exp_df)
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1,])
most_improved <- life_exp_df[life_exp_df$recent_change == max(recent_change, na.rm = TRUE),"country"]
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# Create a variable "num_small_gain" that represent the number of countries whose life expectancy did not improve by 1 year
# or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1,])
most_improved <- life_exp_df[life_exp_df$recent_change == max(recent_change, na.rm = TRUE),"country"]
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE),"country"]
print(most_improved)
get_country_change(Haiti, life_exp_df)
get_country_change <- function(country_name, data_frame) {
data_frame$change_in_life_exp <- data_frame$X2018 - data_frame$X1968
specific_country_name <- data_frame[country_name, "change_in_life_exp"]
return(specific_country_name)
}
get_country_change(Haiti, life_exp_df)
get_country_change("Haiti", life_exp_df)
get_country_change("Haiti", life_exp_df)
get_country_change <- function(country_name, data_frame) {
data_frame$change_in_life_exp <- data_frame$X2018 - data_frame$X1968
print(data_frame$change_in_life_exp)
specific_country_name <- data_frame[country_name, "change_in_life_exp"]
return(specific_country_name)
}
get_country_change("Haiti", life_exp_df)
get_country_change <- function(country_name, data_frame) {
data_frame$change_in_life_exp <- data_frame$X2018 - data_frame$X1968
specific_country_name <- data_frame[country_name, "change_in_life_exp"]
print(specific_country_name)
return(specific_country_name)
}
get_country_change("Haiti", life_exp_df)
life_exp_df["Haiti"]
life_exp_df["Haiti",]
life_exp_df[4,]
life_exp_df$country == "Haiti"
life_exp_df[life_exp_df$country == "Haiti", ]
get_country_change <- function(country_name, data_frame) {
data_frame$change_in_life_exp <- data_frame$X2018 - data_frame$X1968
specific_country_name <- data_frame[data_frame$country == country_name, "change_in_life_exp"]
print(specific_country_name)
return(specific_country_name)
}
get_country_change("Haiti", life_exp_df)
life_exp_df["Australia", "X1919"]
life_exp_df[life_exp_df$country == "Australia", "X1919"]
life_exp_df[life_exp_df$country == "Australia", c("X1919", "X1920")]
life_exp_df[(life_exp_df$country == "Australia" | life_exp_df$country == "Bahrain"), c("X1919", "X1920")]
compare_countries <- function(country1, country2, new_data_frame) {
new_data_frame_with_country_name <- new_data_frame[(new_data_frame$country == country1 | new_data_frame$country == country2),]
new_data_frame_with_country_name$recent_change <- new_data_frame_with_country_name$X2016 - new_data_frame_with_country_name$X1996
extract_df <- new_data_frame_with_country_name[,c("country","X2018","recent_change")]
return(extract_df)
}
print(compare_countries("China", "Bolivia", life_exp_df))
print(compare_countries("United States", "Cuba", life_exp_df))
tas <- c("Phuong Vu", "Yunwei Liang", "Yubing Tian", "Gavin Sreesangkom", "Coco Li", "George Zhang", "Saurav Sawansukha", "Yu Yu Madigan")
# Create a variable called "math_grades" that contains 8 random numbers whose mean is 3.6 and standard deviation is 0.4
math_grades <- rnorm(8, mean = 3.6, sd = 0.4)
# Create a variable called "spanish_grades" that contains 8 random numbers whose mean is 3.8 and standard deviation is 0.25
spanish_grades <- rnorm(8, mean = 3.8, sd = 0.25)
# Create a data frame called "ta_grades" that contains the three vectors that just created
ta_grades <- data.frame(tas, math_grades, spanish_grades)
# Create a variable "table_description" that contains a string that looks like: "The grade data frame has X rows and Y cols: COL_NAMES"
# Use "nrow" to count number of rows and assign to the variable "x"
# Use  "ncol" to count numbero of columns and assign to the variable "y"
# Paste three vectors and assign to the variable "col_names"
# Print out the "table_description" after create it
x <- nrow(ta_grades)
y <- ncol(ta_grades)
col_names <- paste("tas", "math_grades", "spanish_grades", collapse = ', ')
table_description <- paste("The grade data frame has", x, "rows and", y, "cols:", col_names)
print(table_description)
# Change the name of the columns from plural to singular by using the function colnames
# Print it after created
colnames(ta_grades) <- c("ta", "math_grade", "spanish_grade")
print(colnames(ta_grades))
# Add a new column "better_at_math" to the data frame.
ta_grades$better_at_math <- math_grades - spanish_grades > 0
# Print out my TA's grades by using bracket notation
ta_grades[ta_grades$ta == "Saurav Sawansukha",]
# Create a variable called "true_better_at_math" that contains filter result
# Create a variable called "num_better_at_math" that contains nrow to count how many rows fulfilled the requirement
# Print the variable "num_better_at_math"
true_better_at_math <- ta_grades[ta_grades$better_at_math == TRUE,]
num_better_at_math <- nrow(true_better_at_math)
print(num_better_at_math)
# In math_grade and spanish_grade columns, filter out those grades are greater than 4.0 and assign them a new value "4.0"
ta_grades$math_grade[ta_grades$math_grade > 4.0]
ta_grades$math_grade[ta_grades$math_grade > 4.0] <- 4.0
ta_grades$spanish_grade[ta_grades$spanish_grade > 4.0]
ta_grades$spanish_grade[ta_grades$spanish_grade > 4.0] <- 4.0
# Write ta_grades data frame to a new .csv file that inside repo's data directory with the file name "grade_data.csv"
write.csv(ta_grades, "data/grade_data.csv", row.names = FALSE)
#################
#### PART 2 #####
#################
# Use data function to load the Titanic data set
data(Titanic)
# Use "is.data()" function to verity that Titanic data set isn't a data frame
is.data.frame(Titanic)
print(is.data.frame(Titanic))
# Create a new variable "titanic_df" which is the data frame version of the Titanic variable
titanic_df <- as.data.frame(Titanic, stringsAsFactors = FALSE)
# Create a variable "children" that is a data frame containing the rows from "titanic_df" with information about children
children <- titanic_df[titanic_df$Age == "Child",]
# Create a variable "num_children" whose value is total number of children on titanic
# Print the new variable after create it
num_children <- sum(titanic_df$Freq)
print(num_children)
# Filter the data frame for rows containing information on passengers who didn't survive and assign to the variable "did_not_survive"
# Create a boolean that reflects which row has largest lose number and assign to the variable "boolean_not_survived_row"
# Filter out the specific row with all the information and assign it to the variable "most_losses"
# Print out the "most_losses" variable after create it
did_not_survive <- titanic_df[titanic_df$Survived == "No",]
boolean_not_survived_row <- did_not_survive$Freq == max(did_not_survive$Freq)
most_losses <- did_not_survive[boolean_not_survived_row,]
print(most_losses)
# Define a function called "calc_survival_rate" and take "ticket_class" as argument
calc_survival_rate <- function(ticket_class) {
# Filter out ticket class from titanic_df and assign it a new variable "sub_frame"
sub_frame <- titanic_df[titanic_df$Class == ticket_class,]
# Filter out Adult male from the sub data frame and assign it to a new variable "Adult_male"
Adult_male <- sub_frame$Sex == "Male" & sub_frame$Age == "Adult"
# Filter out all the rows with sex is male and assign to the variable "male_row"
male_row <- sub_frame[Adult_male,]
# Sum up total male in the sub data frame use sum function and assign to the variable "total_number_men"
total_men <- sum(male_row$Freq)
# Filter out all the rows who is survived and assign to the variable "boolean_survived"
boolean_survived <- male_row$Survived == "Yes"
# Sum up total survived numbers and assign to the variable "total_survived"
total_survived_men <- sum(male_row[boolean_survived,]$Freq)
# Divide total_survived from total_number_men to get the male_survived_rate
male_survived_rate <- total_survived_men / total_men
# Filter out adult women from sub data set and assign to the variable called "Adult_women"
Adult_women <- sub_frame$Sex == "Female" & sub_frame$Age == "Adult"
# Filter out children from sub data set and assign to the variable "children"
children <- sub_frame$Age == "Child"
# Use or to combine Adult_women and children and assign to the variable "Adult_women_or_children"
Adult_women_or_children <- Adult_women | children
# Put the Adult_women_or_children" back to sub_frame create a new data frame that only contains information about women and children and assign to the variable "women_and_children_df"
women_and_children_df <- sub_frame[Adult_women_or_children,]
# Sum up women and children's number in this data set and assign them a new variable "total_number_women_and_children"
total_number_women_and_children <- sum(women_and_children_df$Freq)
# Filter out women and children who is survived and assign to the new variable "boolean_survived_women_children"
boolean_survived_women_children <- women_and_children_df$Survived == "Yes"
# Create a variable "women_children_alive" that indicate the rows that women and children who are survived
women_children_alive <- sum(women_and_children_df[boolean_survived_women_children,]$Freq)
# Calculate female and children's survival rate and assign to the new variable "female_children_survive_rate"
female_children_survive_rate <- women_children_alive / total_number_women_and_children
# Round male survived rate to nearest integer and reassign to male_survived_rate
male_survived_rate <- round(male_survived_rate * 100)
# Round female children survived rate to nearest integer and reassign to female_children_survive_rate
female_children_survive_rate <- round(female_children_survive_rate * 100)
# Paste the strings together and assign to the new variable called "return_string"
return_string <- paste("Of ", ticket_class, " class, ", male_survived_rate, "% of men survived and ", female_children_survive_rate, "% of women and children survived.", sep = '')
# Return the variable "return_string"
return(return_string)
}
# Call the function calc_survival_rate, and pass in the ticketed class and print the result
print(calc_survival_rate("1st"))
print(calc_survival_rate("2nd"))
print(calc_survival_rate("3rd"))
print(calc_survival_rate("Crew"))
# People in higher class get a larger survival chance than people in lower class like 3rd class
# In each class, women and children get higher survival chance than men
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
# The data from 1800-1970 was collected by Mattias Lindgren; from 1970-2016, the website use data from Global Burden of Diease Study 2016,
# from IHME, the Institute for Health Metrics and Evaluation, University of Washington, Seattle.
# Period from 2017-2099, the website use UN as their main source. They used UN forecasts from World Population Prospects 2017
# Load the life_expectancy_years.csv to RStudio using read.csv function, assign to the "life_exp_df" variable
life_exp_df <- read.csv("data/life_expectancy_years.csv", stringsAsFactors = FALSE)
# Assign a function with single variable x to the variable "get_col_mean"
# Rreturn the average number of the specific column
get_col_mean <- function(x) {
mean_result <- mean(x, na.rm = TRUE)
return(mean_result)
}
# Call the function "get_col_mean" and pass in the argument as X2018
get_col_mean(life_exp_df[,"X2018"])
# Create a variable "world_averages" that is a list of the average life expectancies for each year in the data set
world_averages <- lapply(life_exp_df[,-1], get_col_mean)
# Substract 1918's world average life expectancy from 2018's world average life expectancy
# Assign the result to the new variable called "world_change_18"
world_change_18 <- world_averages$X2018 - world_averages$X1918
# Subtract 1996's life expectancy from 2016's life expectancy and create a new column called "recent_change"
life_exp_df$recent_change <- life_exp_df$X2016 - life_exp_df$X1996
# Create a variable "num_small_gain" that represent the number of countries whose life expectancy did not improve by 1 year
# or more between 1996 and 2016
num_small_gain <- nrow(life_exp_df[life_exp_df$recent_change < 1,])
# Create a variable most_improved that is the name of the country with the largest gain in life expectancy between 1996 and 2016
most_improved <- life_exp_df[life_exp_df$recent_change == max(life_exp_df$recent_change, na.rm = TRUE),"country"]
# Define a function called "get_country_change" that takes two arguments: country_name and data_frame
# calculate the change in life expectancy between 2018 and 1968
# Extract specific country name and assign to the variable "specific_country_name"
# Return the specific_country_name
get_country_change <- function(country_name, data_frame) {
data_frame$change_in_life_exp <- data_frame$X2018 - data_frame$X1968
specific_country_name <- data_frame[data_frame$country == country_name, "change_in_life_exp"]
return(specific_country_name)
}
# Use "get_country_change" to get the change in life expectancy between 1968 and 2018 in Haiti
get_country_change("Haiti", life_exp_df)
# Define a function with three arguments: two countries as strings and a new data frame, assign the function to the variable "compare_countries"
# Extract a new data frame that only contains two countries with all the information and assign to the variable "new_data_fram_with_country_name"
# Add a new column named "recent_change" to the new data frame
# Extract a new data frame with country names and specific columns
# Return the new data frame
compare_countries <- function(country1, country2, new_data_frame) {
new_data_frame_with_country_name <- new_data_frame[(new_data_frame$country == country1 | new_data_frame$country == country2),]
new_data_frame_with_country_name$recent_change <- new_data_frame_with_country_name$X2016 - new_data_frame_with_country_name$X1996
extract_df <- new_data_frame_with_country_name[,c("country","X2018","recent_change")]
return(extract_df)
}
# Use the function compare_countries to compare the life expectancies between United States and Cuba and store the data frame into new variable "us_vs_cuba"
# Print us_vs_cuba
us_vs_cuba <- print(compare_countries("United States", "Cuba", life_exp_df))
